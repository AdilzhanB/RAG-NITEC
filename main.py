import asyncio
import uvicorn
import logging
from datetime import datetime
from typing import Optional, Dict, Any
from contextlib import asynccontextmanager

from fastapi import FastAPI, HTTPException, BackgroundTasks, Depends
from fastapi.staticfiles import StaticFiles
from fastapi.responses import HTMLResponse, FileResponse, JSONResponse
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel, Field

# –ò–º–ø–æ—Ä—Ç –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
from src.rag_pipeline import get_rag_pipeline, AdvancedRAGPipeline
from src.feedback_system import get_feedback_system, AdvancedFeedbackSystem
from src.gemini_client import get_gemini_client, AdvancedGeminiClient
from src.web_search import get_web_search, IntelligentWebSearch

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
rag_pipeline: Optional[AdvancedRAGPipeline] = None
feedback_system: Optional[AdvancedFeedbackSystem] = None
gemini_client: Optional[AdvancedGeminiClient] = None
web_search: Optional[IntelligentWebSearch] = None

@asynccontextmanager
async def lifespan(app: FastAPI):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    global rag_pipeline, feedback_system, gemini_client, web_search
    
    print("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–π RAG —Å–∏—Å—Ç–µ–º—ã...")
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        rag_pipeline = get_rag_pipeline()
        feedback_system = get_feedback_system()
        gemini_client = get_gemini_client()
        web_search = get_web_search()
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        print("üìö –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤...")
        rag_pipeline.load_and_index_documents()
        
        print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!")
        
        yield
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {str(e)}")
        raise
    finally:
        # –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
        print("üîÑ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã...")
        
        if web_search:
            await web_search.clear_search_cache(older_than_hours=1)
        
        if gemini_client:
            await gemini_client.clear_cache(max_age_hours=1)

# –°–æ–∑–¥–∞–Ω–∏–µ FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = FastAPI(
    title="Advanced RAG Chatbot with RLHF",
    description="–ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è RAG —Å–∏—Å—Ç–µ–º–∞ —Å –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑—å—é –∏ –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–º –æ–±—É—á–µ–Ω–∏–µ–º",
    version="2.0.0",
    lifespan=lifespan
)

# CORS middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
app.mount("/static", StaticFiles(directory="static"), name="static")

# Pydantic –º–æ–¥–µ–ª–∏ –¥–ª—è API
class QueryRequest(BaseModel):
    query: str = Field(..., description="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∑–∞–ø—Ä–æ—Å")
    user_id: str = Field(default="default", description="ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    session_id: Optional[str] = Field(None, description="ID —Å–µ—Å—Å–∏–∏")
    priority: str = Field(default="medium", description="–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∑–∞–ø—Ä–æ—Å–∞")

class FeedbackRequest(BaseModel):
    interaction_id: str = Field(..., description="ID –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è")
    feedback_type: str = Field(..., description="–¢–∏–ø –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏")
    rating: Optional[int] = Field(None, ge=1, le=5, description="–û—Ü–µ–Ω–∫–∞ (1-5)")
    correction: Optional[str] = Field(None, description="–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ")
    suggestion: Optional[str] = Field(None, description="–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ")
    explanation: Optional[str] = Field(None, description="–û–±—ä—è—Å–Ω–µ–Ω–∏–µ")

class SearchRequest(BaseModel):
    query: str = Field(..., description="–ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å")
    max_results: int = Field(default=5, ge=1, le=20, description="–ú–∞–∫—Å–∏–º—É–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
    priority: str = Field(default="medium", description="–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –ø–æ–∏—Å–∫–∞")

# –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
async def get_components():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
    if not all([rag_pipeline, feedback_system, gemini_client, web_search]):
        raise HTTPException(status_code=503, detail="–°–∏—Å—Ç–µ–º–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    
    return {
        'rag': rag_pipeline,
        'feedback': feedback_system,
        'gemini': gemini_client,
        'search': web_search
    }

# API endpoints
@app.get("/", response_class=HTMLResponse)
async def main_page():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"""
    return FileResponse("static/index.html")

@app.post("/api/v2/query")
async def process_advanced_query(
    request: QueryRequest,
    background_tasks: BackgroundTasks,
    components: Dict = Depends(get_components)
):
    """–ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞"""
    try:
        start_time = datetime.now()
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π RAG pipeline
        result = await components['rag'].process_query(
            query=request.query,
            user_id=request.user_id,
            session_id=request.session_id
        )
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫
        processing_time = (datetime.now() - start_time).total_seconds()
        result['processing_time'] = processing_time
        result['timestamp'] = datetime.now().isoformat()
        result['api_version'] = "2.0"
        
        # –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
        background_tasks.add_task(
            update_analytics,
            request.query,
            request.user_id,
            processing_time,
            result.get('confidence', 0)
        )
        
        return result
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}")

@app.post("/api/v2/feedback")
async def submit_advanced_feedback(
    request: FeedbackRequest,
    background_tasks: BackgroundTasks,
    components: Dict = Depends(get_components)
):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–π –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏"""
    try:
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
        interaction = components['rag'].interactions_cache.get(request.interaction_id)
        if not interaction:
            raise HTTPException(status_code=404, detail="–í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
        feedback_data = {
            'feedback_type': request.feedback_type,
            'rating': request.rating,
            'correction': request.correction,
            'suggestion': request.suggestion,
            'explanation': request.explanation,
            'timestamp': datetime.now().isoformat()
        }
        
        result = await components['feedback'].process_advanced_feedback(
            interaction, feedback_data
        )
        
        # –û–±—É—á–µ–Ω–∏–µ Gemini –∫–ª–∏–µ–Ω—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
        background_tasks.add_task(
            components['gemini'].learn_from_feedback,
            request.interaction_id,
            feedback_data
        )
        
        return result
        
    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏: {str(e)}")

@app.post("/api/v2/search")
async def intelligent_web_search(
    request: SearchRequest,
    components: Dict = Depends(get_components)
):
    """–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –≤–µ–±-–ø–æ–∏—Å–∫"""
    try:
        from src.web_search import SearchPriority
        
        priority_mapping = {
            'low': SearchPriority.LOW,
            'medium': SearchPriority.MEDIUM,
            'high': SearchPriority.HIGH,
            'critical': SearchPriority.CRITICAL
        }
        
        priority = priority_mapping.get(request.priority, SearchPriority.MEDIUM)
        
        results = await components['search'].intelligent_search(
            query=request.query,
            max_results=request.max_results,
            priority=priority
        )
        
        return {
            'query': request.query,
            'results': results,
            'count': len(results),
            'timestamp': datetime.now().isoformat()
        }
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –≤–µ–±-–ø–æ–∏—Å–∫–∞: {str(e)}")

@app.get("/api/v2/analytics")
async def get_system_analytics(components: Dict = Depends(get_components)):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã"""
    try:
        # –°–±–æ—Ä –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –æ—Ç –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        rag_stats = components['rag'].get_advanced_stats()
        feedback_stats = await components['feedback'].get_advanced_stats()
        gemini_stats = components['gemini'].get_performance_stats()
        search_stats = components['search'].get_search_analytics()
        
        return {
            'timestamp': datetime.now().isoformat(),
            'system_version': '2.0.0',
            'rag_pipeline': rag_stats,
            'feedback_system': feedback_stats,
            'gemini_client': gemini_stats,
            'web_search': search_stats
        }
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏: {str(e)}")

@app.get("/api/v2/health")
async def health_check(components: Dict = Depends(get_components)):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã"""
    try:
        health_status = {
            'status': 'healthy',
            'timestamp': datetime.now().isoformat(),
            'components': {
                'rag_pipeline': 'active',
                'feedback_system': 'active',
                'gemini_client': 'active',
                'web_search': 'active'
            },
            'uptime': 'calculated_uptime',
            'version': '2.0.0'
        }
        
        return health_status
        
    except Exception as e:
        return JSONResponse(
            status_code=503,
            content={
                'status': 'unhealthy',
                'error': str(e),
                'timestamp': datetime.now().isoformat()
            }
        )

@app.post("/api/v2/optimize")
async def optimize_system_performance(
    background_tasks: BackgroundTasks,
    components: Dict = Depends(get_components)
):
    """–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã"""
    try:
        optimization_results = {}
        
        # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è Gemini –∫–ª–∏–µ–Ω—Ç–∞
        gemini_optimization = await components['gemini'].optimize_generation_settings()
        optimization_results['gemini'] = gemini_optimization
        
        # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –≤–µ–±-–ø–æ–∏—Å–∫–∞
        search_optimization = await components['search'].optimize_search_performance()
        optimization_results['web_search'] = search_optimization
        
        # –§–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        background_tasks.add_task(cleanup_old_data, components)
        
        return {
            'optimization_completed': True,
            'timestamp': datetime.now().isoformat(),
            'results': optimization_results
        }
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏: {str(e)}")

@app.get("/api/v2/suggestions/{partial_query}")
async def get_query_suggestions(
    partial_query: str,
    components: Dict = Depends(get_components)
):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –¥–ª—è –∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è"""
    try:
        suggestions = await components['search'].get_search_suggestions(partial_query)
        
        return {
            'partial_query': partial_query,
            'suggestions': suggestions,
            'count': len(suggestions)
        }
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π: {str(e)}")

@app.get("/api/v2/feedback/trends")
async def get_feedback_trends(
    days: int = 30,
    components: Dict = Depends(get_components)
):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç—Ä–µ–Ω–¥–æ–≤ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏"""
    try:
        trends = await components['feedback'].analyze_feedback_trends(days)
        return trends
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–µ–Ω–¥–æ–≤: {str(e)}")

@app.get("/api/v2/user/{user_id}/history")
async def get_user_history(
    user_id: str,
    limit: int = 50,
    components: Dict = Depends(get_components)
):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        history = await components['feedback'].get_user_feedback_history(user_id, limit)
        
        return {
            'user_id': user_id,
            'history': history,
            'count': len(history)
        }
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏: {str(e)}")

# –§–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
async def update_analytics(query: str, user_id: str, processing_time: float, confidence: float):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ"""
    try:
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        # –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —Å–∏—Å—Ç–µ–º—É –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        pass
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏: {str(e)}")

async def cleanup_old_data(components: Dict):
    """–û—á–∏—Å—Ç–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö"""
    try:
        # –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ –≤–µ–±-–ø–æ–∏—Å–∫–∞
        await components['search'].clear_search_cache(older_than_hours=24)
        
        # –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ Gemini
        await components['gemini'].clear_cache(max_age_hours=24)
        
        logging.info("–û—á–∏—Å—Ç–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—à–∏–±–æ–∫
@app.exception_handler(404)
async def not_found_handler(request, exc):
    return JSONResponse(
        status_code=404,
        content={
            "error": "–†–µ—Å—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω",
            "message": "–ó–∞–ø—Ä–æ—à–µ–Ω–Ω—ã–π —Ä–µ—Å—É—Ä—Å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç",
            "timestamp": datetime.now().isoformat()
        }
    )

@app.exception_handler(500)
async def internal_error_handler(request, exc):
    return JSONResponse(
        status_code=500,
        content={
            "error": "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞",
            "message": "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞",
            "timestamp": datetime.now().isoformat()
        }
    )

if __name__ == "__main__":
    print(" –°–∏—Å—Ç–µ–º–∞ –≤–∫–ª—é—á–∞–µ—Ç:")
    print("   - –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π RAG pipeline —Å RLHF")
    print("   - –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—É—é —Å–∏—Å—Ç–µ–º—É –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏") 
    print("   - –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π Gemini –∫–ª–∏–µ–Ω—Ç")
    print("   - –£–º–Ω—ã–π –≤–µ–±-–ø–æ–∏—Å–∫")
    print("   - –ê–Ω–∞–ª–∏—Ç–∏–∫—É –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥")
    print("")
    
    uvicorn.run(
        "main:app",
        host="0.0.0.0",
        port=8000,
        reload=True,
        log_level="info"
    )